// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"github.com/SeanZhenggg/go-utils/logger"
	job2 "jaystar/internal/app/job"
	web2 "jaystar/internal/app/web"
	"jaystar/internal/config"
	"jaystar/internal/controller/job"
	middleware2 "jaystar/internal/controller/job/middleware"
	"jaystar/internal/controller/web"
	"jaystar/internal/controller/web/middleware"
	"jaystar/internal/controller/web/util"
	"jaystar/internal/database"
	"jaystar/internal/repository"
	"jaystar/internal/service"
	"jaystar/internal/service/common"
	"jaystar/internal/utils/kintoneAPI"
)

// Injectors from wire.go:

func NewAppServer() *appServer {
	iConfigEnv := config.ProviderIConfigEnv()
	iLogger := logger.ProviderILogger(iConfigEnv)
	iResponseMiddleware := middleware.ProvideResponseMiddleware(iLogger)
	iHttpLogMiddleware := middleware.ProvideHttpLogMiddleware(iLogger)
	iAuthMiddleware := middleware.ProvideAuthMiddleware(iLogger, iConfigEnv)
	iRecoverMiddleware := middleware.ProvideRecoverMiddleware(iLogger)
	iInternalAuthMiddleware := middleware.ProvideInternalAuthMiddleware()
	iPostgresDB := database.ProvidePostgresDB(iConfigEnv)
	userRepo := repository.ProvideUserRepository(iConfigEnv)
	studentRepo := repository.ProvideStudentRepository()
	userCommonService := common.ProvideUserCommonService(iPostgresDB, userRepo, studentRepo)
	kintoneClient := kintoneAPI.ProvideKintoneClient(iConfigEnv, iLogger)
	kintoneStudentRepository := repository.ProvideKintoneStudentRepository(iConfigEnv, kintoneClient)
	studentCommonService := common.ProvideStudentCommonService(iPostgresDB, studentRepo, userRepo, kintoneStudentRepository)
	userService := service.ProvideUserService(iPostgresDB, userRepo, userCommonService, studentCommonService, iLogger)
	iRequestParse := util.ProviderRequestParse(iLogger)
	userCtrl := web.ProvideUserController(userService, iRequestParse, iConfigEnv)
	kintonePointCardRepository := repository.ProvideKintonePointCardRepository(iConfigEnv, kintoneClient)
	pointCardRepo := repository.ProvidePointCardRepository()
	pointCardService := service.ProvidePointCardService(kintonePointCardRepository, pointCardRepo, studentRepo, iPostgresDB, iLogger)
	kintoneDepositRecordRepository := repository.ProvideKintoneDepositRecordRepository(iConfigEnv, kintoneClient)
	depositRecordCommonService := common.ProvideDepositRecordCommonService(kintoneDepositRecordRepository)
	kintoneReduceRecordRepository := repository.ProvideKintoneReduceRecordRepository(iConfigEnv, kintoneClient)
	reduceRecordCommonService := common.ProvideReduceRecordCommonService(kintoneReduceRecordRepository)
	kintoneScheduleRepository := repository.ProvideKintoneScheduleRepository(iConfigEnv, kintoneClient)
	scheduleCommonService := common.ProvideScheduleCommonService(kintoneScheduleRepository)
	studentService := service.ProvideStudentService(iPostgresDB, studentRepo, userCommonService, studentCommonService, iLogger, pointCardService, depositRecordCommonService, reduceRecordCommonService, scheduleCommonService)
	studentCtrl := web.ProvideStudentController(studentService, iRequestParse, iLogger)
	scheduleRepo := repository.ProvideScheduleRepository(iConfigEnv)
	scheduleService := service.ProvideScheduleService(studentCommonService, scheduleRepo, iPostgresDB, iLogger, scheduleCommonService)
	scheduleCtrl := web.ProvideScheduleController(scheduleService, iRequestParse, iLogger)
	depositRecordRepo := repository.ProvideDepositRecordRepository()
	depositRecordService := service.ProvideDepositRecordService(depositRecordRepo, iPostgresDB, studentCommonService, iLogger, depositRecordCommonService)
	depositRecordCtrl := web.ProvideDepositRecordController(depositRecordService, iLogger, iRequestParse)
	reduceRecordRepo := repository.ProvideReduceRecordRepository(iConfigEnv)
	reduceRecordService := service.ProvideReduceRecordService(reduceRecordRepo, iPostgresDB, studentCommonService, iLogger, reduceRecordCommonService)
	reduceRecordCtrl := web.ProvideReduceRecordController(reduceRecordService, iLogger, iRequestParse)
	kintoneSemesterSettleRecordRepository := repository.ProvideKintoneSemesterSettleRecordRepository(iConfigEnv, kintoneClient)
	semesterSettleRecordRepository := repository.ProvideSemesterSettleRecordRepository()
	semesterSettleRecordService := service.ProvideSemesterSettleRecordService(iPostgresDB, iLogger, depositRecordService, reduceRecordService, kintoneSemesterSettleRecordRepository, semesterSettleRecordRepository, studentService, studentCommonService, pointCardService)
	semesterSettleRecordCtrl := web.ProvideSemesterSettleRecordController(semesterSettleRecordService, iLogger, iRequestParse)
	pointCardCtrl := web.ProvidePointCardController(pointCardService, iRequestParse, iLogger)
	syncCtrl := web.ProvideSyncController(studentService, pointCardService, depositRecordService, reduceRecordService, scheduleService, semesterSettleRecordService, iRequestParse, iLogger)
	controller := web.ProvideController(userCtrl, studentCtrl, scheduleCtrl, depositRecordCtrl, reduceRecordCtrl, semesterSettleRecordCtrl, pointCardCtrl, syncCtrl)
	iWebApp := web2.ProvideWebApp(iResponseMiddleware, iHttpLogMiddleware, iAuthMiddleware, iRecoverMiddleware, iInternalAuthMiddleware, controller)
	jobController := job.ProvideController(semesterSettleRecordService)
	jobLogMiddleware := middleware2.ProvideJobLogMiddleware(iLogger)
	iJob := job2.ProvideJob(jobController, jobLogMiddleware)
	serverAppServer := &appServer{
		iWebApp:   iWebApp,
		job:       iJob,
		configEnv: iConfigEnv,
		logger:    iLogger,
	}
	return serverAppServer
}
